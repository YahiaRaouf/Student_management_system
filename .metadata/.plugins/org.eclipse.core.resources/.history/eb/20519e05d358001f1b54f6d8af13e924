/*
 * main.c
 *
 *  Created on: Aug 11, 2024
 *      Author: yahia raouf
 */

#include <stdio.h>
#include <stdlib.h>

//Student Structure which contains all needed information about a student

struct student {
	char name[50];
	int id;
	int age;
	float gpa;
};

//node structure is used to hand linked list of student data

struct node {
	struct student data;
	struct node *next;
};

struct node *head = NULL;

void enterData(struct student*);	//used to enter student data
void addStudent(const struct student* const);//adds the student data entered to the list of students in database
void displayStudents();		//displays all students in database if there are any
void searchStudentById(int);//Searches for a certain student according to his ID
void updateStudent(int);//Updates a certain student's data according to his ID
float calculateAverageGPA();//Calculate the average GPA of all students in the database
void searchHighestGPA();//Search for the student with the highest GPA and display their data
void deleteStudent(int);//delete a certain student's data according to his ID

int main() {
	setvbuf(stdout, NULL, _IONBF, 0);
	setvbuf(stderr, NULL, _IONBF, 0);

	struct student students;
	int input = 0;

	while (1) {
		fflush(stdout);
		puts("__________STUDENT MANAGEMENT SYSTEM__________\n");
		puts("MENU\n");
		puts("1] Add Student To Database");
		puts("2] Display All Students");
		puts("3] Search For Student By ID");
		puts("4] Update Student Data");
		puts("5] Calculate Average GPA");
		puts("6] Display Student With Highest GPA");
		puts("7] Delete Student From Database");
		puts("8] Exit");

		scanf("%d", &input);
		switch (input) {

		case 1:
			enterData(&students);
			addStudent(&students);
			break;

		case 2:
			displayStudents();
			break;
		case 3:
			int id = 0;
			puts("Enter Student's ID: ");
			scanf("%d", &id);
			searchStudentById(id);
			break;
		case 4:
			puts("Enter Student's ID: ");
			scanf("%d", &id);
			updateStudent(id);
			break;
		case 5:
			calculateAverageGPA();
			break;
		case 6:
			searchHighestGPA();
			break;
		case 7:
			puts("Enter Student's ID: ");
			scanf("%d", &id);
			deleteStudent(id);
			break;
		case 8:
			exit(0);
			break;
		}
	}
}

void enterData(struct student *stdnt) {
	puts("Enter Students Name: ");
	fflush(stdin);
	fgets(stdnt->name, sizeof(stdnt->name), stdin);
	puts("Enter Student ID: ");
	scanf("%d", &stdnt->id);
	puts("Enter Students Age: ");
	scanf("%d", &stdnt->age);
	puts("Enter Students GPA: ");
	scanf("%f", &stdnt->gpa);
}

void addStudent(const struct student *const students) {

	struct node *current = head;

	while (current != NULL) {
		if (current->data.id == students->id) {
			puts("ERROR , Student ID already Exists!");
			return;
		}
	}

	struct node *link = (struct node*) malloc(sizeof(struct node));
	if (link == NULL) {
		puts("MEMORY ALLOCATION FAILED!");
		return;
	}

	else {
		link->data = *students;
		link->next = NULL;

		if (head == NULL) {
			head = link;
			puts("Student Added Successfully!");
			return;
		}

		while (current->next != NULL) {
			current = current->next;
		}

		current->next = link;
		puts("Student Added Successfully!");
		return;
	}

}

void displayStudents() {
	struct node *current = head;

	if (current == NULL) {
		puts("No Students in the list!");
		return;
	}
	int num = 1;
	puts("Student Data!");
	while (current != NULL) {
		printf("%.*s\n", 50,
				"----------------------------------------------------------------------");
		printf("%d]", num);
		printf("%d\n%s\n%d\n%.2f", current->data.id, current->data.name,
				current->data.age, current->data.gpa);
		current = current->next;
		num++;
	}
}

void searchStudentById(int id) {
	struct node *current = head;
	while (current != NULL) {
		if (current->data.id == id) {
			puts("Student Data!");
			printf("%d\n%s\n%d\n%.2f", current->data.id, current->data.name,
					current->data.age, current->data.gpa);
			return;
		} else
			current = current->next;
	}
	puts("Student Not Found!");
	return;
}

void updateStudent(int id) {
	struct node *current = head;
	while (current != NULL) {
		if (current->data.id == id) {
			puts("Edit Students Name: ");
			fflush(stdin);
			fgets(current->data.name, sizeof(current->data.name), stdin);
			puts("Edit Student ID: ");
			scanf("%d", &current->data.id);
			puts("Edit Students Age: ");
			scanf("%d", &current->data.age);
			puts("Edit Students GPA: ");
			scanf("%f", &current->data.gpa);
			puts("Data Edited Successfully");

		} else
			current = current->next;
	}

	puts("Student not Found!");
	return;
}

float calculateAverageGPA() {
	struct node *current = head;

	if (head == NULL) {
		return 0.0;
	}

	float sum = 0;
	int counter = 0;
	float avg = 0;

	while (current != NULL) {
		sum += current->data.gpa;
		counter++;
	}

	avg = sum / counter;
	return avg;
}

void searchHighestGPA() {
	struct node *current = head;
	struct node *highest = head;

	if (head == NULL) {
		puts("No Students Found in List!");
		return;
	}

	while (current->next != NULL) {
		if (current->next->data.gpa > current->data.gpa) {
			highest = current->next;
		} else
			current = current->next;
	}
	puts("Student Data!");
	printf("%d\n%s\n%d\n%.2f", highest->data.id, highest->data.name,
			highest->data.age, highest->data.gpa);

}

void deleteStudent(int id) {
	struct node *current = head->next;
	struct node *prev = head;
	struct node *deletenode = NULL;

	if (head == NULL) {
		puts("No Students Found in List!");
		return;
	}

	if (head->data.id == id) {
		deletenode = head;
		head = head->next;
		free(deletenode);
	}

	while (current != NULL) {
		if (current->data.id == id) {
			if (current->next == NULL) {
				deletenode = current;
				prev->next = NULL;
				free(deletenode);
				return;
			}

			deletenode = current;
			prev->next = prev->next->next;
			deletenode->next = NULL;
			free(deletenode);
			return;
		}
		prev = current;
		current = current->next;
	}

	puts("Student not Found!");
	return;
}

